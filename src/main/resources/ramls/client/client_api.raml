#%RAML 1.0
title: Client process API
version: 1.0
mediaType: application/json
baseUri: http://localhost:8081/api/process/clients
protocols: [ HTTP, HTTPS ]
types:
  Client:
    type: !include datatypes/client_datatypes.raml
  Error:
    type: !include errormessages/error_messages.raml



/:
  description: Fetch all the clients based on the query parameters like name
  get:
    queryParameters:
      first_name:
        type: string
        required: false
        description: Fetch the client details based on first_name
      last_name:
        type: string
        required: false
        description: Fetch the client details based on last_name
      position:
        type: string
        required: false
        description: Fetch the client details based on position
      state:
        type: string
        required: false
        description: Fetch the client details based on state
      city:
        type: string
        required: false
        description: Fetch the client details based on city
      zip_code:
        type: string
        required: false
        description: Fetch the client details based on zip-code
      name:
        type: string
        required: false
        description: Fetch the client details based on name
      poc_id:
        type: string
        required: false
        description: Fetch the client details based on poc_id(person id)
    responses:
      200:
        body:
          application/json:
            type: Client[]

      400:
        body:
          application/json:
            type: Error
            example: { "message" : "Bad Request", "code" : 400 }

  post:
    body:
      application/json:
        type: Client
        example: !include examples/client_example.json
    responses:
      201:
        headers:
          Location:
            description: URI pointing to the location of the newly created client
            example: http://localhost:8081/api/process/clients/123/5573
      409:
        body:
          application/json:
            type: Error
            example: { "message" : "Conflict detected while inserting the record", "code" : 409 }
      400:
        body:
          application/json:
            type: Error
            example: { "message" : "Bad request", "code" : 400 }
      412:
        body:
          application/json:
            type: Error
            example: { "message" : "Precondition failed", "code" : 412 }


/{person_id}/{customer_id}:
  displayName: person_id and customer_id
  description: Fetch the client information for the given person_id and customer_id
  uriParameters:
    person_id:
      type: integer
      required: true
    customer_id:
      type: integer
      required: true
  get:
    headers:
        If-None-Match:
          type: string
          description: |
             The request will be processed only if the eventually existing resource's ETag doesn't match the value.
          example: bfc13a64729c4290ef5b2c2730249c88ca92d82d
    responses:
      200:
        body:
          application/json:
            type: Client
            example: !include examples/client_example.json
        headers:
            ETag:
              displayName: ETag
              description: The current version of the resource
              type: string
              example: c7493-d7-a6b64d37f6cc3
      400:
        body:
          application/json:
            type: Error
            example: { "message" : "Bad request", "code" : 400 }
      404:
        body:
          application/json:
            type: Error
            example: { "message" : "Resource not found", "code" : 404 }
  delete:
    description: To delete a particular Client
    responses:
      204:
        description: "Client has been successfully deleted!"
      400:
        body:
          application/json:
            type: Error
            example: { "message" : "Bad request", "code" : 400 }
      404:
        body:
          application/json:
            type: Error
            example: { "message" : "Resource not found", "code" : 404 }
  patch:
    headers:
      If-Match:
          type: string
          description: |
            defines a precondition for updating the resource only if the versions match that header
          example: c7493-d7-a6b64d37f6cc3
    body:
      application/json:
        type: Client
        example: !include examples/client_example.json
        required: false
    responses:
      204:
        description: "The Client has been successfully updated!"
        headers:
            ETag:
              displayName: ETag
              description: The current version of the resource
              type: string
              example: c7493-d7-a6b64d37f6cc3
      400:
        body:
          application/json:          
            type: Error
            example: { "message" : "Bad request", "code" : 400 }
      404:
        body:
          application/json:
            type: Error
            example: { "message" : "Resource not found", "code" : 404 }
      412:
          headers:
            ETag:
              displayName: ETag
              description: The new version of the resource
              type: string
              example: c7493-d7-a6b64d37f6cc3
          body:
            application/json:
              type: Error
              example: { "message" : "Failed to modify. The resource has been modified by other process. please use GET /Clients/123 to retrieve the latest version of the resource.", "code" : 412 }
