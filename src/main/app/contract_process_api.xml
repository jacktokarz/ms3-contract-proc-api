<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
    
		<flow name="delete_contract_process">
        <choice doc:name="maybe delete product">
            <when expression="#[message.inboundProperties.'http.query.params'.productId != null]">
                <http:request config-ref="offer_HTTP_Request_Configuration" path="/{productId}" method="DELETE" doc:name="offer delete">
                    <http:request-builder>
                        <http:uri-param paramName="productId" value="#[message.inboundProperties.'http.query.params'.productId]"/>

                    </http:request-builder>
                </http:request>
            </when>
            <otherwise>
                <logger message="contract_process delete: productId not set, not deleting a product." level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <logger message="contract_process delete: past product" level="INFO" doc:name="Logger"/>
        <choice doc:name="Maybe Delete Client">
            <when expression="#[message.inboundProperties.'http.query.params'.customer_id != null]">
                <http:request config-ref="client_HTTP_Request_Configuration" path="/{customer_id}" method="DELETE" doc:name="client offer">
                    <http:request-builder>
                        <http:uri-param paramName="customer_id" value="#[message.inboundProperties.'http.query.params'.customer_Id]"/>

                    </http:request-builder>
                </http:request>
            </when>
            <otherwise>
                <logger message="contract_process delete: No customer id defined, none deleted." level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <logger message="contract_process delete: past client" level="INFO" doc:name="Logger"/>
        <http:request config-ref="contract_HTTP_Request_Configuration" path="/{contract_id}" method="DELETE" doc:name="contract sys delete">
            <http:request-builder>
                <http:uri-param paramName="contract_id" value="#[flowVars.contract_id]"/>

            </http:request-builder>
        </http:request>
        <logger message="contract_process delete: All deleted" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="update\patch_contract_process">
        <dw:transform-message doc:name="Save incoming body as flowVar 'params'" metadata:id="22dc0798-68e5-41a6-b301-9d4da02844f5">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload]]></dw:set-payload>
            <dw:set-variable variableName="params"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>
        <set-variable variableName="inbound" value="#[message.inboundProperties]" doc:name="Save inbound"/>
        <logger message="params are: #[flowVars.params] and inbound are: #[flowVars.inbound]" level="INFO" doc:name="Logger"/>
        <http:request config-ref="contract_HTTP_Request_Configuration" path="/{contract_id}" method="PATCH" doc:name="Patch contract">
            <http:request-builder>
                <http:uri-param paramName="contract_id" value="#[flowVars.contract_id]"/>
                <http:header headerName="If-Match" value="#[flowVars.inbound.'If-Match']"/>
                <http:header headerName="Content-Type" value="application/json"/>
            </http:request-builder>
        </http:request>
        <http:request config-ref="contract_HTTP_Request_Configuration" path="/{contract_id}" method="GET" doc:name="get new contract">
            <http:request-builder>
                <http:uri-param paramName="contract_id" value="#[flowVars.contract_id]"/>
                <http:header headerName="Content-Type" value="application/json"/>
                <http:header headerName="If-None-Match" value="#[flowVars.inbound.'If-None-Match']"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="save ids from new contract">
            <dw:set-variable variableName="ids"><![CDATA[%dw 1.0
%output application/java
---
{
	customer_id: payload.customer_id,
	product_id: payload.product_id,
	person_id: payload.escalation_contact_id
}]]></dw:set-variable>
        </dw:transform-message>
        <dw:transform-message doc:name="Set payload for offer patch">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	name: flowVars.params.product_name,
	description: flowVars.params.product_description,
	product_entitlements: flowVars.params.product_entitlements map ($.entitlement_id)
	 when flowVars.params.product_entitlements != null otherwise null 
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="offer_HTTP_Request_Configuration" path="/{productId}" method="PATCH" doc:name="patch offer">
            <http:request-builder>
                <http:uri-param paramName="productId" value="#[flowVars.ids.product_id[0]]"/>
                <http:header headerName="If-Match" value="#[flowVars.inbound.'product-If-Match']"/>
                <http:header headerName="Content-Type" value="application/json"/>
            </http:request-builder>
        </http:request>
        <logger message="Client update is completed." level="INFO" doc:name="Logger"/>
        <http:request config-ref="client_HTTP_Request_Configuration" path="/{customer_id}" method="PATCH" doc:name="patch client">
            <http:request-builder>
                <http:query-params expression="#[message.inboundProperties.'http.query.params']"/>
                <http:uri-param paramName="customer_id" value="#[message.inboundProperties.'http.query.params'.customer_id]"/>
                <http:header headerName="If-Match" value="#[message.inboundProperties.'If-Match']"/>
            </http:request-builder>
        </http:request>

        <logger message="Offer patch done." level="INFO" doc:name="Logger"/>

        <logger message="Contract patch done." level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="select\get_by_id_contract_process">
        <logger message="in get single contract: contrat id= #[flowVars.contract_id] and if-none-match= #[message.inboundProperties.'If-None-Match']" level="INFO" doc:name="Logger"/>
        <set-variable variableName="noMatch" value="#[message.inboundProperties.'If-None-Match']" doc:name="Variable"/>
        <http:request config-ref="contract_HTTP_Request_Configuration" path="{contract_id}" method="GET" doc:name="Get contract from sys">
            <http:request-builder>
                <http:uri-param paramName="contract_id" value="#[flowVars.contract_id]"/>
                <http:header headerName="If-None-Match" value="#[message.inboundProperties.'If-None-Match']"/>

            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Save contract" metadata:id="54b10413-5fb2-4c6c-bcc6-dba29bcc3d76">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-variable variableName="contract"><![CDATA[%dw 1.0
%output application/java
---
{
	contract: {
		id: payload.id[0],
		name: payload.name[0],
		description: payload.description[0],
		start_date: payload.start_date[0],
		end_date: payload.end_date[0],
		entitlement_update_list: payload.entitlement_update_list map ((entitlementupdatelist , indexOfEntitlementupdatelist) -> entitlementupdatelist),
		escalation_contact_id: payload.escalation_contact_id[0],
		customer_id: payload.customer_id[0],
		product_id: payload.product_id[0],
		sow: payload.sow[0]
	}
}]]></dw:set-variable>
        </dw:transform-message>
        <logger message="saved: product id- #[flowVars.contract.contract.product_id] and if none match- #[flowVars.noMatch]" level="INFO" doc:name="Logger"/>
        <http:request config-ref="offer_HTTP_Request_Configuration" path="/{productId}" method="GET" doc:name="Get offer from process">
            <http:request-builder>
                <http:uri-param paramName="productId" value="#[flowVars.contract.contract.product_id]"/>
                <http:header headerName="If-None-Match" value="#[flowVars.noMatch]"/>

            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="Transform Message" metadata:id="e9c979f4-a759-40e4-9666-91d0fedd5bc6">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	contract: flowVars.contract.contract,
	offer: {
		product_id: payload.product_id,
		product_name: payload.product_name,
		product_description: payload.product_description,
		entitlements: payload.product_entitlements
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message="Got a contract: #[payload]" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="select\get_all_contract_process">
        <logger message="get all contract process: product_id= #[message.inboundProperties.'http.query.params'.product_id] and contract_name= #[message.inboundProperties.'http.query.params'.contract_name]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="original_params" value="#[message.inboundProperties.'http.query.params']" doc:name="initial_params"/>
        
        <flow-ref name="get_collection_filtering" doc:name="get_collection_filtering"/>
        <dw:transform-message doc:name="Save system contract list" metadata:id="8a21dda2-0ab4-4a75-8d99-88adc91a4ef8">
            <dw:input-payload mimeType="application/json"/>
            <dw:set-variable variableName="system_contract_list"><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-variable>
        </dw:transform-message>
        <filter ref="IfContractSystemListIsEmpty" doc:name="Filter out if list is empty"/>
        <choice doc:name="Filter contract list by offer params">
            <when expression="#[(flowVars.original_params.entitlement_name != null) || (flowVars.original_params.product_name != null)]">
                <set-variable variableName="offer_filtered_contract_list" value="#[new java.util.ArrayList()]" mimeType="application/json" doc:name="New empty contract list"/>
                <foreach collection="#[flowVars.system_contract_list]" doc:name="Filter each contract in list by parameters">
                    <set-variable variableName="this_contract" value="#[payload]" doc:name="Save this contract"/>
                    <choice doc:name="get offer by product id, filtered by params">
                        <when expression="#[(flowVars.original_params.entitlement_name != null) &amp;&amp; (flowVars.original_params.product_name == null)]">
                            <http:request config-ref="offer_HTTP_Request_Configuration" path="/{product_id}" method="GET" doc:name="entitlement_name">
                                <http:request-builder>
                                    <http:query-param paramName="entitlement_name" value="#[flowVars.original_params.entitlement_name]"/>
                                    <http:uri-param paramName="product_id" value="#[payload.product_id]"/>
                                    <http:header headerName="If-None-Match" value="??????"/>
                                </http:request-builder>
                            </http:request>
                            
                    <dw:transform-message doc:name="Transform Payload into Java">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
                    </dw:transform-message>
                            <expression-component doc:name="Expression"><![CDATA[Object offer= payload;
String entitlement_name= flowVars.original_params.entitlement_name;

	if(!offer.entitlement_name.equals(entitlement_name)) {
		return;
	}

flowVars.offer_filtered_contract_list.add(flowVars.this_contract);]]></expression-component>
                        </when>
                        <when expression="#[flowVars.original_params.entitlement_name == null &amp;&amp; flowVars.original_params.product_name != null]">
                            <http:request config-ref="offer_HTTP_Request_Configuration" path="/{product_id}" method="GET" doc:name="product name">
                                <http:request-builder>
                                    <http:query-param paramName="product_name" value="#[flowVars.original_params.product_name]"/>
                                    <http:uri-param paramName="product_id" value="#[payload.product_id]"/>
                                    <http:header headerName="If-None-Match" value="???????"/>
                                </http:request-builder>
                            </http:request>
                    <dw:transform-message doc:name="Transform Payload into Java">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
                    </dw:transform-message>
                            <expression-component doc:name="Expression"><![CDATA[Object offer= payload;
String product_name= flowVars.original_params.product_name;
System.out.println("product name is: "+product_name+" and offer is: "+offer.toString());

	if(!offer.product_name.equals(product_name)) {
		return;
	}

flowVars.offer_filtered_contract_list.add(flowVars.this_contract);]]></expression-component>
                        </when>
                        <otherwise>
                            <http:request config-ref="offer_HTTP_Request_Configuration" path="/{product_id}" method="GET" doc:name="both">
                                <http:request-builder>
                                    <http:query-param paramName="entitlement_name" value="#[flowVars.original_params.entitlement_name]"/>
                                    <http:query-param paramName="product_name" value="#[flowVars.original_params.product_name]"/>
                                    <http:uri-param paramName="product_id" value="#[payload.product_id]"/>
                                    <http:header headerName="If-None-Match" value="??????"/>
                                </http:request-builder>
                            </http:request>
                    <dw:transform-message doc:name="Transform Payload into Java">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
                    </dw:transform-message>
                            <expression-component doc:name="add to new list if they match"><![CDATA[Object offer= payload;
String entitlement_name= flowVars.original_params.entitlement_name;
String product_name= flowVars.original_params.product_name;

	if(!offer.entitlement_name.equals(entitlement_name)) {
		return;
	}

	if(!offer.product_name.equals(product_name)) {
		return;
	}

flowVars.offer_filtered_contract_list.add(flowVars.this_contract);]]></expression-component>
                        </otherwise>
                    </choice>

                </foreach>
                <set-variable variableName="system_contract_list" value="#[flowVars.offer_filtered_contract_list]" doc:name="Set 'system_contract_list' to 'offer_filtered_list'"/>
            </when>
            <otherwise>
                <logger message="Not filtering contract list by offer params." level="INFO" doc:name="No need to filter if there are no offer related params"/>
            </otherwise>
        </choice>
        <logger message="contract process get all: got all contract id's: #[payload]" level="INFO" doc:name="Logger"/>
        
        <filter ref="IfContractSystemListIsEmpty" doc:name="Filter is list is empty"/>
        
        <choice doc:name="Filter contract list by client params">
            <when expression="#[(flowVars.original_params.state != null) || (flowVars.original_params.city != null) || (flowVars.original_params.zip_code != null) || (flowVars.original_params.client_name != null) || (flowVars.original_params.poc_id != null)]">
                <set-variable doc:name="New Empty Contract List" value="#[new java.util.ArrayList()]" variableName="client_filtered_list"/>
                <foreach doc:name="Filter each contract in list by client parameters" collection="#[flowVars.system_contract_list]">
                    <set-variable variableName="this_contract" value="#[payload]" doc:name="Save this contract"/>
                    <http:request config-ref="client_HTTP_Request_Configuration" path="/{customer_id}" method="GET" doc:name="get client by customer id">
                        <http:request-builder>
                            <http:uri-param paramName="customer_id" value="#[payload.customer_id]"/>
                            <http:header headerName="If-None-Match" value="????????"/>
                        </http:request-builder>
                    </http:request>
                    <dw:transform-message doc:name="Transform Payload into java">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
                    </dw:transform-message>
                    <expression-component doc:name="Add to client filtered list if they match"><![CDATA[Object client= payload;
String city= flowVars.original_params.city;
String state= flowVars.original_params.state;
String zip_code= flowVars.original_params.zip_code;
String client_name= flowVars.original_params.client_name;
int poc_id= flowVars.original_params.poc_id;

if(city!= null) {
	if(!client.city.equals(city)) {
		return;
	}
}

if(state!= null) {
	if(!client.state.equals(state)) {
		return;
	}
}

if(zip_code!= null) {
	if(!client.state.equals(zip_code)) {
		return;
	}
}

if(client_name!= null) {
	if(!client.client_name.equals(client_name)) {
		return;
	}
}

if(poc_id!= null) {
	if(!client.poc_id.equals(poc_id)) {
		return;
	}
}

flowVars.client_filtered_list.add(flowVars.this_contract);]]></expression-component>
                </foreach>
                <set-variable doc:name="Set system contract list to client filtered list" value="#[flowVars.client_filtered_list]" variableName="system_contract_list"/>
            </when>
            <otherwise>
                <logger message="contract process get all: Got all contracts: #[flowVars.system_contract_list]" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <logger message="Filtered by client query params" level="INFO" doc:name="Logger"/>
        <filter ref="IfContractSystemListIsEmpty" doc:name="Filter if list is empty"/>
        <set-payload value="#[flowVars.system_contract_list]" doc:name="Set Payload as system contract list"/>
        <set-variable variableName="process_contracts" value="#[new java.util.ArrayList()]" doc:name="set empty process contracts list"/>

        <foreach doc:name="Make the full process contract object from the id of the system contract object">
            <set-variable variableName="contract_id" value="#[payload.id]" doc:name="get id from contract" mimeType="application/json"/>
            <flow-ref name="select\get_by_id_contract_process" doc:name="select\get_by_id_contract_process"/>
            <expression-transformer expression="#[flowVars.process_contracts.add(payload)]" doc:name="Add retrieved contract to process contracts' list" mimeType="application/json"/>
        </foreach>
        
         <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
flowVars.process_contracts]]></dw:set-payload>
        </dw:transform-message>

    </flow>
    <flow name="insert\post_contract_process">
        <set-session-variable variableName="params" value="#[message.inboundProperties.'http.query.params']" doc:name="Session Variable"/>
        <choice doc:name="Check for incoming product_id">
            <when expression="#[sessionVars.params.product_id == null]">
                <expression-component doc:name="Save entitlements"><![CDATA[java.util.HashMap entitlements = new java.util.HashMap();
		for(Object obj: sessionVars.params.entrySet()) {
			if(obj.getKey().contains("entitlement_")) {
				entitlements.put(obj.getKey(), obj.getValue() );
			}
		}
flowVars.entitlements= entitlements;]]></expression-component>
                <http:request config-ref="offer_HTTP_Request_Configuration" path="/" method="POST" doc:name="make offer">
                    <http:request-builder>
                        <http:query-param paramName="name" value="#[sessionVars.params.product_name]"/>
                        <http:query-param paramName="description" value="#[sessionVars.params.product_description]"/>
                        <http:query-params expression="#[flowVars.entitlements]"/>
                        <http:header headerName="content-type" value="application/json"/>

                    </http:request-builder>
                </http:request>
                <set-session-variable variableName="product_id" value="#[message.inboundProperties.'http.query.params'.passed_product_id]" doc:name="Session Variable"/>
                <logger message="contract_process_post: Offer Created" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <set-session-variable variableName="product_id" value="#[sessionVars.params.product_id]" doc:name="Session Variable"/>
                <http:request config-ref="offer_HTTP_Request_Configuration" path="/{productId}" method="GET" doc:name="get offer">
                    <http:request-builder>
                        <http:uri-param paramName="productId" value="#[sessionVars.params.product_id]"/>
                        <http:header headerName="if-none-match" value="#[message.inboundProperties.'if-none-match']"/>
                        <http:header headerName="content-type" value="application/json"/>

                    </http:request-builder>
                </http:request>
                <logger message="contract_process_post: Offer Already exists" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <logger message="Placeholder for Client Creation" level="INFO" doc:name="Placeholder for Client Creation"/>
        <choice doc:name="Check for incoming customer_id">
            <when expression="#[sessionVars.params.customer_id == null]">
                <logger message="Filler for making a customer" level="INFO" doc:name="Standing in for calling post on customer_offer"/>
            </when>
            <otherwise>
                <logger message="didn't have to make a customer because was passed a customer_id" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <choice doc:name="Check for incoming contract_id">
            <when expression="#[sessionVars.params.contract_id == null]">
                <http:request config-ref="contract_HTTP_Request_Configuration" path="/" method="POST" doc:name="Make Contract">
                    <http:request-builder>
                        <http:query-param paramName="description" value="#[sessionVars.params.contract_name]"/>
                        <http:query-param paramName="sow" value="#[sessionVars.params.sow]"/>
                        <http:query-param paramName="start_date" value="#[sessionVars.params.start_date]"/>
                        <http:query-param paramName="end_date" value="#[sessionVars.params.end_date]"/>
                        <http:query-param paramName="entitlement_update_list" value="#[sessionVars.params.entitlement_update_list]"/>
                        <http:query-param paramName="escalation_contact_id" value="#[sessionVars.params.escalation_contact_id]"/>
                        <http:query-param paramName="product_id" value="#[sessionVars.product_id]"/>
                        <http:query-param paramName="customer_id" value="#[flowVars.passed_customer_id]"/>

                    </http:request-builder>
                </http:request>
                <logger message="contract_process_POST: made contract" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <http:request config-ref="contract_HTTP_Request_Configuration" path="/{contract_id}" method="GET" doc:name="get contract">
                    <http:request-builder>
                        <http:uri-param paramName="contract_id" value="#[sessionVars.params.contract_id]"/>
                        <http:header headerName="if-none-match" value="#[message.inboundProperties.'if-none-match']"/>
                        <http:header headerName="content-type" value="application/json"/>

                    </http:request-builder>
                </http:request>
                <logger message="contract_process_post: Received contract_id, no need to make new contract." level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="get_collection_filtering">
    <choice doc:name="Check which contract filtering params were passed">
            <when expression="#[message.inboundProperties.'http.query.params'.product_id!=null &amp;&amp; message.inboundProperties.'http.query.params'.customer_id == null &amp;&amp; message.inboundProperties.'http.query.params'.contract_name == null]">
                <http:request config-ref="contract_HTTP_Request_Configuration" path="/" method="GET" doc:name="get contracts filtered by product_id">
                    <http:request-builder>
                        <http:query-param paramName="product_id" value="#[message.inboundProperties.'http.query.params'.product_id]"/>
                    </http:request-builder>
                </http:request>

            </when>

            <when expression="#[message.inboundProperties.'http.query.params'.customer_id!=null &amp;&amp; message.inboundProperties.'http.query.params'.product_id == null &amp;&amp; message.inboundProperties.'http.query.params'.contract_name == null]">
                <http:request config-ref="contract_HTTP_Request_Configuration" path="/" method="GET" doc:name="customer_id">
                    <http:request-builder>
                        <http:query-param paramName="customer_id" value="#[message.inboundProperties.'http.query.params'.customer_id]"/>

                    </http:request-builder>
                </http:request>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.customer_id==null &amp;&amp; message.inboundProperties.'http.query.params'.product_id == null &amp;&amp; message.inboundProperties.'http.query.params'.contract_name != null]">
                <http:request config-ref="contract_HTTP_Request_Configuration" path="/" method="GET" doc:name="contract_name">
                    <http:request-builder>
                        <http:query-param paramName="contract_name" value="#[message.inboundProperties.'http.query.params'.contract_name]"/>
                    </http:request-builder>
                </http:request>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.customer_id!=null &amp;&amp; message.inboundProperties.'http.query.params'.product_id == null &amp;&amp; message.inboundProperties.'http.query.params'.contract_name != null]">
                <http:request config-ref="contract_HTTP_Request_Configuration" path="/" method="GET" doc:name="contract name and customer id">
                    <http:request-builder>
                        <http:query-param paramName="contract_name" value="#[message.inboundProperties.'http.query.params'.contract_name]"/>
                        <http:query-param paramName="customer_id" value="#[message.inboundProperties.'http.query.params'.customer_id]"/>
                    </http:request-builder>
                </http:request>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.customer_id!=null &amp;&amp; message.inboundProperties.'http.query.params'.product_id != null &amp;&amp; message.inboundProperties.'http.query.params'.contract_name == null]">
                <http:request config-ref="contract_HTTP_Request_Configuration" path="/" method="GET" doc:name="all contracts filtered by product and customer">
                    <http:request-builder>
                        <http:query-param paramName="product_id" value="#[message.inboundProperties.'http.query.params'.product_id]"/>
                        <http:query-param paramName="customer_id" value="#[message.inboundProperties.'http.query.params'.customer_id]"/>
                    </http:request-builder>
                </http:request>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.customer_id==null &amp;&amp; message.inboundProperties.'http.query.params'.product_id != null &amp;&amp; message.inboundProperties.'http.query.params'.contract_name != null]">
                <http:request config-ref="contract_HTTP_Request_Configuration" path="/" method="GET" doc:name="get all contracts by product id and contract name">
                    <http:request-builder>
                        <http:query-param paramName="product_id" value="#[message.inboundProperties.'http.query.params'.product_id]"/>
                        <http:query-param paramName="contract_name" value="#[message.inboundProperties.'http.query.params'.contract_name]"/>
                    </http:request-builder>
                </http:request>
            </when>
            <when expression="#[message.inboundProperties.'http.query.params'.customer_id!=null &amp;&amp; message.inboundProperties.'http.query.params'.product_id != null &amp;&amp; message.inboundProperties.'http.query.params'.contract_name != null]">
                <http:request config-ref="contract_HTTP_Request_Configuration" path="/" method="GET" doc:name="Get all contracts filtered by all contract params">
                    <http:request-builder>
                        <http:query-param paramName="product_id" value="#[message.inboundProperties.'http.query.params'.product_id]"/>
                        <http:query-param paramName="contract_name" value="#[message.inboundProperties.'http.query.params'.contract_name]"/>
                        <http:query-param paramName="customer_id" value="#[message.inboundProperties.'http.query.params'.customer_id]"/>
                    </http:request-builder>
                </http:request>
            </when>
            <otherwise>
                <http:request config-ref="contract_HTTP_Request_Configuration" path="/" method="GET" doc:name="none"/>
            </otherwise>
        </choice>
    </sub-flow>
</mule>
